.. _troubleshooting-the-scheduling-algorithm:

##########################################
Troubleshooting the *Scheduling Algorithm*
##########################################

This page is dedicated to troubleshooting the Feature Based Scheduler (_`FBS`) algorithm, which is the main *scheduling algorithm* for the Scheduler CSC.

In general, this will be the last line of resource users will have to resort to when debuging issues at night time.
Nevertheless, one may be interested in inspecting the state of the `FBS`_ at any time if they are interested in having a better idea of the scheduler operational conditions.

Before proceding make sure you read and understand the :ref:`scheduler-operational-procedures-overview` section, which gives a high level description of the Scheduler CSC architecture, the *scheduling algorithm* and the FBS.

.. _troubleshooting-the-scheduling-algorithm-environment-setup:

Environment Setup
=================

In short, troubleshooting the FBS boils down to inspecting snapshots of the Python object that represents a survey configuration.
These snapshot are python pickle files generated by the Scheduler CSC that can loaded on different machines, so long as the environment used to load them is compatible with that of the machine that generated it.

Unfortunately, the standard nublado environment has a different set of packages than the Scheduler CSC.
Therefore we need to create a new environment on nublado to be able to load and inspect the snapshots generated by the Scheduler.

The process is as follows:

#.  From your nublado instance, open a new terminal and load the DM environment with:

    .. prompt:: bash

        source $LOADSTACK

#.  Create a new conda environment:

    .. prompt:: bash

        conda create --name scheduler-dev python=3.8

#.  Activate the new environment:

    .. prompt:: bash

        conda activate scheduler-dev

#.  Install the rubin-sim package with mamba: 

    .. prompt:: bash

        mamba install -c lsstts -c conda-forge rubin-sim ipykernel

    The rubin-sim package contains several modules for simulating and analysing Rubin data, and includes the feature based scheduler module, we will need to inspect the snapshots.

#.  Create a notebook environment with the scheduler-dev conda environment:

    .. prompt:: bash

        ipython kernel install --name "scheduler-dev" --user
    
    This will allow us to select the "scheduler-dev" environment for our Jupyter notebooks.

After the steps above are completed, create a new notebook.
On the top-right-hand side, click on the environment name, where it is says "LSST" and follow the sequence below to select the "scheduler-dev" environment.

.. list-table:: 

    * - .. figure:: ./_static/new-jupyter-notebook-lsst.png
    * - .. figure:: ./_static/new-jupyter-notebook-lsst-selected.png
    * - .. figure:: ./_static/new-jupyter-notebook-lsst-select-kernel.png
    * - .. figure:: ./_static/new-jupyter-notebook-scheduler-dev-selection.png
    * - .. figure:: ./_static/new-jupyter-notebook-scheduler-dev.png

You are now ready to analyse some Scheduler snapshots.

.. note::

    The environment we created to analyse the scheduler snapshots does not have the libraries required to access the control system.
    Keep that in mind for the following procedures.

.. _troubleshooting-the-scheduling-algorithm-retrieving-snapshots:

Retrieving Snapshots
====================

To retrieve a snapshot created by Scheduler, first we need to find its ``url``.
For that, follow the :ref:`scheduler-night-time-operation-troubleshooting-recovering-from-a-scheduler-fault-find-last-scheduler-snapshot` procedure.

Once you have the ``url`` you can retrieve the snapshot directly from a notebook.

We will use this same notebook to analyse the data, so we start by loading all the libraries we will need.

.. code-block:: python

    import io
    import os
    import math
    import pickle
    import importlib

    import urllib.request

    import numpy as np
    import healpy as hp

In the cell below we use the same ``url`` found in :ref:`scheduler-night-time-operation-troubleshooting-recovering-from-a-scheduler-fault-find-last-scheduler-snapshot`, make sure to update the entire string with the appropriate value.

.. code-block:: python

    uri = "https://s3.cp.lsst.org/rubinobs-lfa-cp/Scheduler:2/Scheduler:2/2022/02/17/Scheduler:2_Scheduler:2_2022-02-18T09:26:04.347.p"

Now we use ``urlretrieve`` to download the file and save it to a local file named ``scheduler_snapshot.p``.

.. code-block:: python

    dest, _ = urllib.request.urlretrieve(url=uri, filename="./scheduler_snapshot.p")

Finally, we load the content of the snapshot.

.. code-block:: python

    with open(dest, "rb") as fp:
        scheduler, conditions = pickle.load(fp)

As you can see from the code above, the snapshot contains two different objects when unpacked; ``scheduler`` and ``conditions``.
The first object, as the na suggests, contains the FBS snapshot.
The second object contains a snapshot of the last set of telemetry passed to the ``scheduler``.
We will need these two objects for the exploratory analysis we will do next.

.. _troubleshooting-the-scheduling-algorithm-the-conditions-snapshot:

The *conditions* Snapshot
=========================

Before diving into the *scheduler* snapshot, let us take a quick glance at the *conditions* snapshot.

As mentioned above this object contains a snapshot of the telemetry stream.
You can check what are all the attributes on this object with the following:

.. code-block:: python

    [attr for attr in dir(conditions) if not attr.startswith("__")]

You will notice it contains things like ``telAlt``, ``telAz``, ``rotTelPos``, ``telDec``, ``telRA``, which are determined from the observatory state.
There are things like ``wind_direction`` and ``wind_speed`` which are obtained from the weather station telemetry stream.
These are all single scalars.

Nevertheless, the telemetry stream also contains some healpix maps.
Probably the most interesting one is ``slewtime``, which contains a map of the slew time constructed by the observatory model.
We can visualize the slew time healpix map with the following:

.. code-block:: python

    hp.mollview(conditions.slewtime)


.. figure:: ./_static/conditions-slewtime.png

.. _troubleshooting-the-scheduling-algorithm-analysing-the-scheduler-snapshot:

Analysing the *scheduler* Snapshot
==================================

The first step in analysing the scheduler snapshot is understanding its structure.
As mentioned in :ref:`scheduler-operational-procedures-overview` and shown in the :ref:`FBS architecture diagram <fig-fbs-architecture>`, there is an hierarchical tree of ``surveys``, ``basis functions`` and ``features``.

On the ``scheduler`` snapshot that can be seen by the following:

.. code-block:: python

    scheduler.survey_lists

The ``survey_lists`` attribute of the ``scheduler`` object contains a *list of lists* of ``Survey`` objects.

When selecting a target, we first pass the ``conditions`` to the ``scheduler`` and, when we request a target, the ``scheduler`` computes the rewards for all surveys and select the one whith the highest reward.

.. note::

    Work in progress...
